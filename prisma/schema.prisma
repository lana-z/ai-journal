// Prisma schema file, docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String         @id @default(cuid())
  name          String?
  email         String         @unique
  emailVerified DateTime?
  image         String?
  password      String?        // Hashed password if using credentials
  role          UserRole       @default(ADMIN) // Default to ADMIN for this phase
  bio           String?        // Admin profile information
  journalEntries JournalEntry[]
  blogPosts     BlogPost[]     // For tracking which admin created/edited posts
  accounts      Account[]
  sessions      Session[]
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

enum UserRole {
  ADMIN
  USER          // For future expansion
}

model JournalEntry {
  id          String    @id @default(cuid())
  date        DateTime
  title       String
  slug        String?   @unique
  content     String
  tags        String[]
  blogPost    BlogPost?
  published   Boolean   @default(false)
  author      User      @relation(fields: [authorId], references: [id])
  authorId    String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model BlogPost {
  id             String       @id @default(cuid())
  slug           String       @unique
  title          String
  summary        String
  content        String       @db.Text
  publishDate    DateTime
  journalEntry   JournalEntry @relation(fields: [journalEntryId], references: [id])
  journalEntryId String       @unique
  author         User         @relation(fields: [authorId], references: [id])
  authorId       String
  tags           String[]
  aiGenerated    Boolean      @default(true)
  published      Boolean      @default(false)
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
}
